<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CoAP协议解析</title>
      <link href="/posts/2937813511/"/>
      <url>/posts/2937813511/</url>
      
        <content type="html"><![CDATA[<p>CoAP协议的基础知识这边就不多说了，具体可以通过下面的文章、表格进行学习:</p><p><strong>基于NB-IoT的CoAP协议浅析</strong></p><p><a href="https://blog.csdn.net/liwei16611/article/details/82700365?ops_request_misc=&request_id=&biz_id=102&utm_term=基于NBIOT的coap&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-82700365" target="_blank" rel="noopener">https://blog.csdn.net/liwei16611/article/details/82700365?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E5%9F%BA%E4%BA%8ENBIOT%E7%9A%84coap&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-0-82700365</a></p><p><a href="https://wwe.lanzous.com/iXZ8ydtjy2h" target="_blank" rel="noopener">一张表搞懂CoAP</a></p><h2 id="用Wireshark工具来抓取数据包"><a href="#用Wireshark工具来抓取数据包" class="headerlink" title="用Wireshark工具来抓取数据包"></a>用Wireshark工具来抓取数据包</h2><p>通过<strong>Wireshark</strong>来抓取CoAP协议的数据包，对数据包的学习掌握它的用法</p><p>打开工具在地址栏里输入<code>udp.port == 5683</code>来找到想要的数据</p><p><img src="https://i.loli.net/2020/06/19/quOEnM3NgmkFJxo.png" alt=""></p><p>我们找到含有数据的一条数据包打开，可以看到底层是UDP的数据</p><p>在上层封装了一些数据就变成了CoAP协议。</p><p><img src="https://i.loli.net/2020/06/19/DlqysOVXGzgTFLB.png" alt=""></p><pre class=" language-c"><code class="language-c"><span class="token number">42</span> <span class="token number">03</span> ef <span class="token number">89</span> 4d <span class="token number">55</span> b4 6d <span class="token number">71</span> <span class="token number">74</span> <span class="token number">74</span> <span class="token number">06</span> <span class="token number">74</span> <span class="token number">6f</span> <span class="token number">70</span> <span class="token number">69</span> <span class="token number">63</span> <span class="token number">31</span> <span class="token number">49</span> <span class="token number">63</span> 3d <span class="token number">63</span> 6c <span class="token number">69</span>  <span class="token number">65</span> 6e <span class="token number">74</span> <span class="token number">31</span> <span class="token number">05</span> <span class="token number">75</span> 3d <span class="token number">74</span> <span class="token number">6f</span> 6d <span class="token number">08</span> <span class="token number">70</span> 3d <span class="token number">73</span> <span class="token number">65</span> <span class="token number">63</span>  <span class="token number">72</span> <span class="token number">65</span> <span class="token number">74</span> ff <span class="token number">48</span> <span class="token number">65</span> 6c 6c <span class="token number">6f</span> <span class="token number">20</span> <span class="token number">77</span> <span class="token number">6f</span> <span class="token number">72</span> 6c <span class="token number">64</span> <span class="token number">21</span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> CoAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Window10本地安装EMQ实现MQTT连接</title>
      <link href="/posts/14201218/"/>
      <url>/posts/14201218/</url>
      
        <content type="html"><![CDATA[<h2 id="1-EMQ简介"><a href="#1-EMQ简介" class="headerlink" title="1. EMQ简介"></a>1. EMQ简介</h2><p>​        EMQ是一款完全<a href="https://baike.baidu.com/item/开源/20720669" target="_blank" rel="noopener">开源</a>，高度可伸缩，高可用的分布式 <a href="https://baike.baidu.com/item/MQTT/3618851" target="_blank" rel="noopener">MQTT</a> <a href="https://baike.baidu.com/item/消息服务器/568190" target="_blank" rel="noopener">消息服务器</a>，同时也支持 <a href="https://baike.baidu.com/item/CoAP/6469713" target="_blank" rel="noopener">CoAP</a>/LwM2M 一站式 IoT 协议接入。EMQ 是 <a href="https://baike.baidu.com/item/5G/29780" target="_blank" rel="noopener">5G</a> 时代万物互联的消息引擎，适用于 <a href="https://baike.baidu.com/item/IoT/552548" target="_blank" rel="noopener">IoT</a>、M2M 和移动应用程序，可处理千万级别的并发客户端。</p><h2 id="2-EMQ安装"><a href="#2-EMQ安装" class="headerlink" title="2. EMQ安装"></a>2. EMQ安装</h2><h3 id="2-1-先去官网下载3-2-0的安装包"><a href="#2-1-先去官网下载3-2-0的安装包" class="headerlink" title="2.1 先去官网下载3.2.0的安装包"></a>2.1 先去官网下载3.2.0的安装包</h3><p><a href="https://www.emqx.io/cn/downloads#broker" target="_blank" rel="noopener">https://www.emqx.io/cn/downloads#broker</a><br><img src="https://i.loli.net/2020/06/19/c8rd6zXqIHenYlG.png" alt=""></p><h3 id="2-2-然后解压缩，用CMD命令工具进入bin文件夹"><a href="#2-2-然后解压缩，用CMD命令工具进入bin文件夹" class="headerlink" title="2.2 然后解压缩，用CMD命令工具进入bin文件夹"></a>2.2 然后解压缩，用CMD命令工具进入bin文件夹</h3><p><img src="https://i.loli.net/2020/06/19/wEZXbKqmv3OuDNh.png" alt=""></p><p>然后输入 <code>emqx.cmd start</code>，启动EMQ服务器</p><h3 id="2-3-在CMD中找到电脑的IP地址，然后输入网站进入EMQ网页端"><a href="#2-3-在CMD中找到电脑的IP地址，然后输入网站进入EMQ网页端" class="headerlink" title="2.3 在CMD中找到电脑的IP地址，然后输入网站进入EMQ网页端"></a>2.3 在CMD中找到电脑的IP地址，然后输入网站进入EMQ网页端</h3><p>​        在CMD中输入ipconfig,找到你自己电脑的IP地址，然后输入</p><p><code>IP地址:18083</code> ，输入账号密码就能进入EMQ网页端。</p><p><strong>账号</strong>：admin</p><p><strong>密码</strong>：public</p><p><img src="https://i.loli.net/2020/06/19/roOwURnavyNbIek.png" alt=""></p><h2 id="3-开启插件"><a href="#3-开启插件" class="headerlink" title="3. 开启插件"></a>3. 开启插件</h2><p>​        为了下一步进行CoAP协议通信，找到插件开启CoAP插件</p><p><img src="https://i.loli.net/2020/06/19/1NdvpJAsI6LGxwk.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> EMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python来搭建CoAP服务器和客户端</title>
      <link href="/posts/3988338018/"/>
      <url>/posts/3988338018/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CoAP包的安装"><a href="#1-CoAP包的安装" class="headerlink" title="1. CoAP包的安装"></a>1. CoAP包的安装</h2><p>在pycharm中直接搜索安装<code>CoAPthon3</code>,然后安装即可</p><p><img src="https://i.loli.net/2020/06/19/sjV7nWaf1RdSh9U.png" alt=""><br><img src="https://i.loli.net/2020/06/19/guoPOKhFsnXTebB.png" alt=""><br><img src="https://i.loli.net/2020/06/19/HJcnQ4DTPsbrLdV.png" alt=""></p><h2 id="2-建立CoAP服务器"><a href="#2-建立CoAP服务器" class="headerlink" title="2. 建立CoAP服务器"></a>2. 建立CoAP服务器</h2><p>首先我们需要创建两个类，然后通过创建的类来实例化一个CoAP服务端对象，创建完成后开始监听就好了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> coapthon<span class="token punctuation">.</span>server<span class="token punctuation">.</span>coap <span class="token keyword">import</span> CoAP<span class="token keyword">from</span> coapthon<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>resource <span class="token keyword">import</span> ResourceHost <span class="token operator">=</span> <span class="token string">"192.168.2.171"</span>        <span class="token comment" spellcheck="true"># 本机IP地址</span>Port <span class="token operator">=</span> <span class="token number">5683</span>                      <span class="token comment" spellcheck="true"># 端口号</span><span class="token keyword">class</span> <span class="token class-name">BasicResource</span><span class="token punctuation">(</span>Resource<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"BasicResource"</span><span class="token punctuation">,</span> coap_server<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>BasicResource<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> coap_server<span class="token punctuation">,</span> visible<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                            observable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> allow_children<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token string">"Basic Resource"</span>    <span class="token keyword">def</span> <span class="token function">render_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">render_PUT</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>payload <span class="token operator">=</span> request<span class="token punctuation">.</span>payload        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">render_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> BasicResource<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span>location_query <span class="token operator">=</span> request<span class="token punctuation">.</span>uri_query        res<span class="token punctuation">.</span>payload <span class="token operator">=</span> request<span class="token punctuation">.</span>payload        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">render_DELETE</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">CoAPServer</span><span class="token punctuation">(</span>CoAP<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>        CoAP<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>add_resource<span class="token punctuation">(</span><span class="token string">'basic'</span><span class="token punctuation">,</span> BasicResource<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CoAPServer IP addr : %s port : %d "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>Host<span class="token punctuation">,</span> Port<span class="token punctuation">)</span><span class="token punctuation">)</span>    server <span class="token operator">=</span> CoAPServer<span class="token punctuation">(</span>Host<span class="token punctuation">,</span>Port<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server Shutdown"</span><span class="token punctuation">)</span>        server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Exiting..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="3-建立CoAP客户端"><a href="#3-建立CoAP客户端" class="headerlink" title="3. 建立CoAP客户端"></a>3. 建立CoAP客户端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> coapthon<span class="token punctuation">.</span>client<span class="token punctuation">.</span>helperclient <span class="token keyword">import</span> HelperClienthost <span class="token operator">=</span> <span class="token string">"192.168.2.171"</span>port <span class="token operator">=</span> <span class="token number">5683</span>path <span class="token operator">=</span> <span class="token string">"/mqtt/topic1?c=client1&amp;u=tom&amp;p=secret"</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    client <span class="token operator">=</span> HelperClient<span class="token punctuation">(</span>server<span class="token operator">=</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span> <span class="token punctuation">:</span>        response <span class="token operator">=</span> client<span class="token punctuation">.</span>put<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>pretty_print<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 每隔5秒发送一次数据</span>    client<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>path = &quot;/mqtt/topic1?c=client1&amp;u=tom&amp;p=secret&quot;</code></p><p>路径的格式是由EMQ的CoAP插件决定的，具体可以上<a href="https://docs.emqx.io/broker/latest/cn/advanced/plugins.html" target="_blank" rel="noopener">官网文档查询</a></p><h2 id="4-运行测试"><a href="#4-运行测试" class="headerlink" title="4. 运行测试"></a>4. 运行测试</h2><h3 id="4-1-在pycharm里同时开启服务器和客户端"><a href="#4-1-在pycharm里同时开启服务器和客户端" class="headerlink" title="4.1 在pycharm里同时开启服务器和客户端"></a>4.1 在pycharm里同时开启服务器和客户端</h3><p>可以从服务器中看到客户端每隔5S发送一次<code>hello word!</code><br><img src="https://i.loli.net/2020/06/19/bkQLWBSdCTro1KN.png" alt=""></p><h3 id="4-2-在pycharm开启客户端，连接EMQ"><a href="#4-2-在pycharm开启客户端，连接EMQ" class="headerlink" title="4.2 在pycharm开启客户端，连接EMQ"></a>4.2 在pycharm开启客户端，连接EMQ</h3><p>在EMQ网页端连接中可以看到已经连上，然后点击<strong>Websocket</strong>连接，订阅主题<strong>topic1</strong>，然后再下方订阅消息列表可以看到每隔5S就会出现<strong>hello world!</strong><br><img src="https://i.loli.net/2020/06/19/M24loEyqVDG7Cr6.png" alt=""></p><p><img src="https://i.loli.net/2020/06/19/nqljQKRN7aOk5M1.png" alt=""></p><p><img src="https://i.loli.net/2020/06/19/e2mYX1OGLsECQ3B.png" alt=""></p><p><img src="https://i.loli.net/2020/06/19/K6VQ8GbZAOYvgk4.png" alt=""></p><h3 id="4-3-UDP模拟CoAP协议"><a href="#4-3-UDP模拟CoAP协议" class="headerlink" title="4.3 UDP模拟CoAP协议"></a>4.3 UDP模拟CoAP协议</h3><p>CoAP协议底层是UDP协议，再UDP上层再封装了一层协议就变成了CoAP协议，具体什么是CoAP协议请看文章</p><p><a href="http://yaoyufan96.tk/posts/2937813511/">CoAp协议解析</a></p><p>我们用pycharm打开CoAP服务器，找一个UDP工具连接连接服务器，发送如下指定的数据包</p><pre class=" language-c"><code class="language-c"><span class="token number">42</span> <span class="token number">03</span> ef <span class="token number">89</span> 4d <span class="token number">55</span> b4 6d <span class="token number">71</span> <span class="token number">74</span> <span class="token number">74</span> <span class="token number">06</span> <span class="token number">74</span> <span class="token number">6f</span> <span class="token number">70</span> <span class="token number">69</span> <span class="token number">63</span> <span class="token number">31</span> <span class="token number">49</span> <span class="token number">63</span> 3d <span class="token number">63</span> 6c <span class="token number">69</span> <span class="token number">65</span> 6e <span class="token number">74</span> <span class="token number">31</span> <span class="token number">05</span> <span class="token number">75</span> 3d <span class="token number">74</span> <span class="token number">6f</span> 6d <span class="token number">08</span> <span class="token number">70</span> 3d <span class="token number">73</span> <span class="token number">65</span> <span class="token number">63</span> <span class="token number">72</span> <span class="token number">65</span> <span class="token number">74</span> ff <span class="token number">48</span> <span class="token number">65</span> 6c 6c <span class="token number">6f</span> <span class="token number">20</span> <span class="token number">77</span> <span class="token number">6f</span> <span class="token number">72</span> 6c <span class="token number">64</span> <span class="token number">21</span></code></pre><p>注意服务器地址也是本地IP！</p><p><img src="https://i.loli.net/2020/06/19/lgIwn6Tpy2OSXvU.png" alt=""></p><p>这个数据包发送的数据是<code>hello world!</code>,我们可以看到数据已经成功发送到服务器了</p><p><img src="https://i.loli.net/2020/06/19/W3STNqhM6lmA2EX.png" alt=""></p><h3 id="4-4-通过UDP发送到EMQ"><a href="#4-4-通过UDP发送到EMQ" class="headerlink" title="4.4 通过UDP发送到EMQ"></a>4.4 通过UDP发送到EMQ</h3><p>一样的操作这边就不演示了，主要连接EMQ的IP地址，然后订阅再查看消息即可。</p><p><strong>！！注意</strong></p><p><strong>每条消息发送的message id 必须保证唯一，不然服务器是收不到消息的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CoAP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
